@mixin prefixed-browser($action, $rules...) {
  -webkit-#{$action}: $rules;
  -moz-#{$action}: $rules;
  -ms-#{$action}: $rules;
  -o-#{$action}: $rules;
  animation-#{$action}: $rules;
}
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
  @-moz-keyframes #{$name} { @content; }
  @-ms-keyframes #{$name} { @content; }
  @-o-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; }
}
@function opacityLayer($rotX) {
  @if ($rotX == 0deg) {
    @return 1;
  }
  @else {
    @return 0;
  }
}
@mixin layerPrism($i, $timeTotal, $transZ: 0px, $rotX : 0deg) {
  opacity: opacityLayer($rotX);
  @include prefixed-browser(transform, rotateX($rotX) translateZ($transZ));
  @include prefixed-browser(backface-visibility, hidden);
  @include prefixed-browser(animation-timing-function, ease-out-in);
  @include prefixed-browser(animation-name, opacityLayers-#{$i});
  @include prefixed-browser(animation-iteration-count, infinite);
  @include prefixed-browser(animation-duration, $timeTotal);
}
@mixin rotatePrism($height, $width, $colors, $timePause, $timeTotal) {
  $nsides: length($colors);
  $transZ: $height/(2*sin(180deg/$nsides)/cos(180deg/$nsides));
  $stepTimePause: $timePause*100%/$timeTotal;
  $stepTimeMove: (100%-($stepTimePause*$nsides))/$nsides;
  @for $i from 0 to $nsides {
      &.layer-#{$i+1} {
        display: block;
        background-color: nth($colors,$i+1);
        @include layerPrism($i, $timeTotal, $transZ, 360deg*$i/$nsides);
      }
  }
  @include keyframes(rotateLayers) {
    @for $i from 0 to $nsides {
      $cframe: floor($i*($stepTimeMove+$stepTimePause));
      $nframe: floor($cframe + $stepTimePause);
      #{$cframe, $nframe} {
        @include prefixed-browser(transform, rotateX(-(360deg*$i/$nsides)));
      }
    }
    100% {@include prefixed-browser(transform, rotateX(-360deg));}
  }
  @for $i from 0 to $nsides {
    @include keyframes(opacityLayers-#{$i}) {
      @if $i == 0 {
        0%, #{floor(($i+1)*$stepTimePause)} {
          opacity: 1;
          @include prefixed-browser(animation-timing-function, ease-in-out);
        }
        #{floor(($i+1)*$stepTimePause) + $stepTimeMove},
#{floor(100-$stepTimeMove)} {
          opacity: 0;
        }
      }
      @else {
        0%, #{floor($i*($stepTimePause+$stepTimeMove) - $stepTimeMove)} {
          opacity: 0;
        }
        #{floor($i*($stepTimePause+$stepTimeMove))},
#{floor(($i+1)*($stepTimePause+$stepTimeMove) - $stepTimeMove)} {
          opacity: 1;
          @include prefixed-browser(animation-timing-function, ease-in-out);
        }
        #{floor(($i+1)*($stepTimePause+$stepTimeMove))}, 100% {
          opacity: 0;
        }
      }
    }
  }
}

$height: 200px;
$width: 350px;
$colors: #20B2AA #87CEFA #F0E68C #F08080;
$timePause: 3s;
$timeTotal: (length($colors)+1)*$timePause+1;

.container {
  @include prefixed-browser(perspective, $height*4);
}
#prism {
  position: absolute;
  top: $height;
  left: 50%;
  margin-left: -$width/2;
  @include prefixed-browser(animation-name, rotateLayers);
  @include prefixed-browser(animation-timing-function, ease-in-out);
  @include prefixed-browser(animation-iteration-count, infinite);
  @include prefixed-browser(animation-duration, $timeTotal);
  @include prefixed-browser(transform-style, preserve-3d);
  @include prefixed-browser(transform-origin, 0 $height/2 0);
  & div {
    display: none;
    position: absolute;
    width: $width;
    height: $height;
    border: 2px solid #333;
    background: rgba(255,255,255,0.8);
    box-shadow: inset 0 0 20px rgba(0,0,0,0.2);
    line-height: $height;
    text-align: center;
    font-size: 100px;
    @include rotatePrism($height, $width, $colors, $timePause, $timeTotal);
  }
}
